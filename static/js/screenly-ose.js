// Generated by CoffeeScript 1.11.1

/* screenly-ose ui */

(function() {
  var API, App, Controller, Directory, DirectoryView, DisposableView, Entries, Entry, EntryView, Schedule, ScheduleView, Schedules, SchedulesView, TimeView, TimelineView, delay, get_filename, get_mimetype, get_template, insertWbr, supported_upload_mimetypes, supported_video_uri_schemes, url_test,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  $().ready(function() {
    var hide_popover, popover_shown, show_popover;
    popover_shown = false;
    hide_popover = function() {
      $('#subsribe-form-container').html('');
      popover_shown = false;
      $(window).off('keyup.email_popover');
      return $(window).off('click.email_popover');
    };
    show_popover = function() {
      $('#subsribe-form-container').html($('#subscribe-form-template').html());
      popover_shown = true;
      $(window).on('keyup.email_popover', function(event) {
        if (event.keyCode === 27) {
          return hide_popover();
        }
      });
      return $(window).on('click.email_popover', function(event) {
        var pop;
        pop = document.getElementById('subscribe-popover');
        if (!$.contains(pop, event.target)) {
          return hide_popover();
        }
      });
    };
    return $('#show-email-popover').click(function() {
      if (!popover_shown) {
        show_popover();
      }
      return false;
    });
  });

  API = (window.Screenly || (window.Screenly = {}));

  get_template = function(name) {
    return _.template(($("#" + name)).html());
  };

  delay = function(wait, fn) {
    return _.delay(fn, wait);
  };

  supported_upload_mimetypes = [['jpg jpeg png pnm gif bmp'.split(' '), 'image'], ['avi mkv mov mpg mpeg mp4 ts flv'.split(' '), 'video']];

  supported_video_uri_schemes = 'rtsp rtmp'.split(' ');

  get_mimetype = (function(_this) {
    return function(filename) {
      var ext, match, mt, scheme;
      scheme = (_.first(filename.split(':'))).toLowerCase();
      match = indexOf.call(supported_video_uri_schemes, scheme) >= 0;
      if (match) {
        return 'video';
      }
      ext = (_.last(filename.split('.'))).toLowerCase();
      mt = _.find(supported_upload_mimetypes, function(mt) {
        return indexOf.call(mt[0], ext) >= 0;
      });
      if (mt) {
        return mt[1];
      } else {
        return null;
      }
    };
  })(this);

  url_test = function(v) {
    return /(http|https|rtsp|rtmp):\/\/[\w-]+(\.?[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/.test(v);
  };

  get_filename = function(v) {
    return (v.replace(/[\/\\\s]+$/g, '')).replace(/^.*[\\\/]/g, '');
  };

  insertWbr = function(v) {
    return (v.replace(/\//g, '/<wbr>')).replace(/\&/g, '&amp;<wbr>');
  };

  Backbone.emulateJSON = true;

  API.Entry = Entry = (function(superClass) {
    extend(Entry, superClass);

    function Entry() {
      this.defaults = bind(this.defaults, this);
      return Entry.__super__.constructor.apply(this, arguments);
    }

    Entry.prototype.idAttribute = "id";

    Entry.prototype.fields = 'name directory start end'.split(' ');

    Entry.prototype.defaults = function() {
      return {
        name: '',
        directory: '',
        mimetype: '',
        start: 0,
        end: 0
      };
    };

    return Entry;

  })(Backbone.Model);

  API.Entries = Entries = (function(superClass) {
    extend(Entries, superClass);

    function Entries() {
      return Entries.__super__.constructor.apply(this, arguments);
    }

    Entries.prototype.model = Entry;

    Entries.prototype.comparator = function(item) {
      return parseInt(item.get('start'));
    };

    Entries.prototype.url = function() {
      return "/api/schedules/" + this.schedule_id + "/entries";
    };

    return Entries;

  })(Backbone.Collection);

  API.Schedule = Schedule = (function(superClass) {
    extend(Schedule, superClass);

    function Schedule() {
      this.defaults = bind(this.defaults, this);
      return Schedule.__super__.constructor.apply(this, arguments);
    }

    Schedule.prototype.idAttribute = "id";

    Schedule.prototype.fields = 'name active'.split(' ');

    Schedule.prototype.defaults = function() {
      return {
        name: '',
        active: false
      };
    };

    return Schedule;

  })(Backbone.Model);

  API.Schedules = Schedules = (function(superClass) {
    extend(Schedules, superClass);

    function Schedules() {
      return Schedules.__super__.constructor.apply(this, arguments);
    }

    Schedules.prototype.model = Schedule;

    Schedules.prototype.url = "/api/schedules";

    return Schedules;

  })(Backbone.Collection);

  API.Directory = Directory = (function(superClass) {
    extend(Directory, superClass);

    function Directory() {
      return Directory.__super__.constructor.apply(this, arguments);
    }

    Directory.prototype.url = '/api/directory';

    return Directory;

  })(Backbone.Collection);

  API.View = {};

  DisposableView = (function(superClass) {
    extend(DisposableView, superClass);

    function DisposableView() {
      this.close = bind(this.close, this);
      return DisposableView.__super__.constructor.apply(this, arguments);
    }

    DisposableView.prototype.close = function() {
      this.unbind();
      this.$el.empty();
      return this.undelegateEvents();
    };

    return DisposableView;

  })(Backbone.View);

  API.View.TimeView = TimeView = (function(superClass) {
    extend(TimeView, superClass);

    function TimeView() {
      this.render = bind(this.render, this);
      this.get_time = bind(this.get_time, this);
      this.initialize = bind(this.initialize, this);
      return TimeView.__super__.constructor.apply(this, arguments);
    }

    TimeView.prototype.initialize = function(attrs, options) {
      var that;
      that = this;
      this.type = options.type;
      this.template = $("<span class='input-group-addon'> " + options.name + " </span> <div class='form-control'> </div>");
      this.$el.html(this.template);
      this.field = this.$el.find('.form-control');
      this.model.bind('change', this.render);
      return this.render();
    };

    TimeView.prototype.get_time = function(time) {
      var hours, minutes, seconds;
      hours = Math.floor(time / 3600);
      minutes = Math.floor((time - hours * 3600) / 60);
      seconds = (time - hours * 3600 - minutes * 60).toFixed(0);
      return [hours, minutes, seconds];
    };

    TimeView.prototype.render = function() {
      var hours, minutes, ref, seconds;
      ref = this.get_time(this.model.attributes[this.type]), hours = ref[0], minutes = ref[1], seconds = ref[2];
      return this.field.text(hours + ':' + minutes + ':' + seconds);
    };

    return TimeView;

  })(DisposableView);

  API.View.DirectoryView = DirectoryView = (function(superClass) {
    extend(DirectoryView, superClass);

    function DirectoryView() {
      this.render = bind(this.render, this);
      this.clickFolder = bind(this.clickFolder, this);
      this.fetch = bind(this.fetch, this);
      this.initialize = bind(this.initialize, this);
      return DirectoryView.__super__.constructor.apply(this, arguments);
    }

    DirectoryView.prototype.events = {
      'click #directory-list > li.dir': 'clickFolder'
    };

    DirectoryView.prototype.initialize = function(attrs, options) {
      this.template = $('<span class="input-group-addon"> Directory </span> <div class="form-control" style="height: 300px"> <div id="directory"/> <ul id="directory-list"/> </div>');
      this.$el.html(this.template);
      this.list = this.$el.find('#directory-list');
      this.directory = this.$el.find('#directory');
      this.collection.bind('sync', this.render);
      return this.fetch(this.model.attributes.directory || '/');
    };

    DirectoryView.prototype.fetch = function(path) {
      var retryOnce, that;
      this.path = path;
      that = this;
      retryOnce = true;
      return this.collection.fetch({
        data: {
          path: this.path
        },
        success: function(collection, response, options) {
          that.model.attributes.directory = that.path;
          return that.model.save();
        },
        error: function(collection, response, options) {
          if (retryOnce) {
            retryOnce = false;
            return that.fetch('/');
          }
        }
      });
    };

    DirectoryView.prototype.clickFolder = function(e) {
      var data_stat, stat;
      data_stat = $(e.target).data('stat');
      if (data_stat) {
        stat = JSON.parse(data_stat);
        return this.fetch(stat['path']);
      }
    };

    DirectoryView.prototype.render = function() {
      var $li, cls, i, len, model, ref;
      this.list.empty();
      this.directory.text(this.path);
      ref = this.collection.models;
      for (i = 0, len = ref.length; i < len; i++) {
        model = ref[i];
        cls = model.attributes.mime === 'dir' ? 'dir' : 'file';
        $li = $("<li class='" + cls + "'><img class='" + cls + "'/>" + model.attributes.name + "</li>");
        $li.data('stat', JSON.stringify(model.attributes));
        this.list.append($li);
      }
      return false;
    };

    return DirectoryView;

  })(DisposableView);

  API.View.EntryView = EntryView = (function(superClass) {
    extend(EntryView, superClass);

    function EntryView() {
      this.close = bind(this.close, this);
      this.deleteEntry = bind(this.deleteEntry, this);
      this.updateName = bind(this.updateName, this);
      this.initialize = bind(this.initialize, this);
      return EntryView.__super__.constructor.apply(this, arguments);
    }

    EntryView.prototype.events = {
      'change input#name': 'updateName',
      'click #delete-button': 'deleteEntry'
    };

    EntryView.prototype.initialize = function(attrs, options) {
      var that;
      that = this;
      this.intervall = options.intervall;
      this.index = options.index;
      this.deletable = this.model.collection.length > 1;
      this.$el.empty();
      this.template = $("<div class='panel panel-success'> <div class='panel-heading clearfix'> <div class='panel-title pull-left'> Entry </div> <div class='pull-right'> <button id='delete-button' type='button' class='btn btn-danger' " + (this.deletable ? '' : 'disabled') + "> Delete </button> </div> </div> <div class='input-group'> <span class='input-group-addon'> Name </span> <input id='name' class='form-control' type='text' placeholder='name' value='" + this.model.attributes.name + "'/> </div> <div class='input-group' id='directory-container'> </div> <div class='input-group' id='start-container'> </div> <div class='input-group' id='end-container'> </div> </div>");
      this.directory = new DirectoryView({
        collection: new Directory({}),
        model: this.model,
        el: this.template.find('#directory-container')
      });
      this.start = new TimeView({
        el: this.template.find('#start-container'),
        model: this.model
      }, {
        name: 'Start',
        type: 'start'
      });
      this.end = new TimeView({
        el: this.template.find('#end-container'),
        model: this.model
      }, {
        name: 'End',
        type: 'end'
      });
      this.$el.html(this.template);
      return false;
    };

    EntryView.prototype.updateName = function(e) {
      this.model.attributes.name = $(e.target).val();
      return this.model.save();
    };

    EntryView.prototype.deleteEntry = function(e) {
      var last, next;
      if (this.index - 1 >= 0) {
        last = this.model.collection.models[this.index - 1];
        last.attributes.end = this.model.attributes.end;
        last.save();
      } else if (this.index + 1 <= this.model.collection.length - 1) {
        next = this.model.collection.models[this.index + 1];
        next.attributes.start = this.model.attributes.start;
        next.save();
      }
      this.intervall.remove();
      this.model.destroy();
      return API.controller.unshowEntry();
    };

    EntryView.prototype.close = function() {
      this.start.close();
      this.end.close();
      this.directory.close();
      return EntryView.__super__.close.call(this);
    };

    return EntryView;

  })(DisposableView);

  API.View.Timeline = TimelineView = (function(superClass) {
    extend(TimelineView, superClass);

    function TimelineView() {
      this.close = bind(this.close, this);
      this.render = bind(this.render, this);
      this.renderIntervall = bind(this.renderIntervall, this);
      this.insert = bind(this.insert, this);
      this.get_intervall_at = bind(this.get_intervall_at, this);
      this.showEntryView = bind(this.showEntryView, this);
      this.updateIntervallWidths = bind(this.updateIntervallWidths, this);
      this.initialize = bind(this.initialize, this);
      this.get_time = bind(this.get_time, this);
      this.duration = bind(this.duration, this);
      this.get_start = bind(this.get_start, this);
      this.get_end = bind(this.get_end, this);
      return TimelineView.__super__.constructor.apply(this, arguments);
    }

    TimelineView.prototype.events = {
      'click .timeline-intervall': 'showEntryView'
    };

    TimelineView.prototype.get_end = function($intervall) {
      return ($intervall.width() + $intervall.offset().left - this.$el.offset().left) * this.max_seconds / this.$el.width();
    };

    TimelineView.prototype.get_start = function($intervall) {
      return get_end($intervall) - ($intervall.width() * this.max_seconds / this.$el.width());
    };

    TimelineView.prototype.duration = function($intervall) {
      return this.get_end($intervall) - this.get_start($intervall);
    };

    TimelineView.prototype.get_time = function(e) {
      var hours, minutes, relX, seconds, time;
      relX = e.pageX - this.$el.offset().left;
      time = (relX / this.$el.width()) * 24 * 60 * 60;
      hours = Math.floor(time / 3600);
      minutes = Math.floor((time - hours * 3600) / 60);
      seconds = (time - hours * 3600 - minutes * 60).toFixed(0);
      return [hours, minutes, seconds];
    };

    TimelineView.prototype.initialize = function(attrs, options) {
      var that, tooltip;
      this.max_seconds = 24 * 60 * 60;
      this.width = this.$el.parent().width();
      this.intervalls = [];
      that = this;
      $(window).on('resize', this.updateIntervallWidths);
      tooltip = this.$el.find('#timeline-tooltip');
      this.$el.mousemove(function(e) {
        var hours, minutes, ref, relX, seconds;
        relX = e.pageX - that.$el.offset().left;
        ref = that.get_time(e), hours = ref[0], minutes = ref[1], seconds = ref[2];
        tooltip.attr('title', hours + ':' + minutes + ':' + seconds);
        tooltip.css({
          top: (e.pageY - $(e.target).offset().top) - 5,
          left: relX
        });
        tooltip.tooltip('fixTitle');
        return tooltip.tooltip('show');
      });
      this.$el.mouseleave(function(e) {
        return tooltip.tooltip('hide');
      });
      this.$el.contextMenu({
        menu: [
          {
            name: 'Insert keyframe',
            callback: function(e) {
              var relX, time;
              relX = e.data.pageX - that.$el.offset().left;
              time = (relX / that.$el.width()) * 24 * 60 * 60;
              return that.insert(time);
            }
          }
        ],
        data: that
      });
      return this.render();
    };

    TimelineView.prototype.updateIntervallWidths = function(e) {
      return this.render();
    };

    TimelineView.prototype.showEntryView = function(e) {
      var $intervall, index, model;
      $intervall = $(e.currentTarget);
      this.$el.find('.timeline-intervall').removeClass('active');
      $intervall.addClass('active');
      index = parseInt($intervall.data('index'));
      model = this.collection.models[index];
      return API.controller.showEntry(model, {
        intervall: $intervall,
        index: index
      });
    };

    TimelineView.prototype.get_intervall_at = function(time) {
      var entry, i, len, ref;
      ref = this.collection.models;
      for (i = 0, len = ref.length; i < len; i++) {
        entry = ref[i];
        if (entry.attributes.start < time && entry.attributes.end > time) {
          return entry;
        }
      }
    };

    TimelineView.prototype.insert = function(time) {
      var intervall, startTime;
      intervall = this.get_intervall_at(time);
      if (intervall) {
        startTime = intervall.attributes.start;
        intervall.attributes.start = time;
        intervall.save();
        this.collection.create({
          directory: '/',
          start: startTime,
          end: time
        });
        this.render();
      }
      return false;
    };

    TimelineView.prototype.renderIntervall = function(entry, index) {
      var $intervall, $keyframe, that;
      that = this;
      $intervall = $("<div class='timeline-intervall' data-index='" + index + "'><div class='timeline-keyframe'/></div>");
      $intervall.css({
        width: (((entry.attributes.end - entry.attributes.start) / this.max_seconds) * this.$el.width()) + 'px'
      });
      this.$el.append($intervall);
      $keyframe = $intervall.find('.timeline-keyframe');
      if (index < this.collection.models.length - 1) {
        return $keyframe.mousedown(function(e) {
          that.isDragging = true;
          that.dragIntervall = $intervall;
          that.startX = e.pageX;
          that.startWidth = $intervall.width();
          that.next = $(".timeline-intervall[data-index='" + (index + 1) + "']");
          return that.nextStartWidth = that.next.width();
        });
      } else {
        return $keyframe.toggleClass('timeline-keyframe');
      }
    };

    TimelineView.prototype.render = function() {
      var entry, i, index, len, ref, results, that;
      this.$el.find('.timeline-intervall').remove();
      this.isDragging = false;
      this.dragIntervall;
      this.startWidth = null;
      this.startX = null;
      this.next = null;
      this.nextStartWidth = null;
      that = this;
      this.$el.mousemove(function(e) {
        var delta;
        if (that.isDragging) {
          delta = e.pageX - that.startX;
          if (that.startWidth + delta > 2 && delta < that.nextStartWidth - 2) {
            that.dragIntervall.width(that.startWidth + delta);
            return that.next.width(that.nextStartWidth - delta);
          }
        }
      });
      this.$el.mouseup(function(e) {
        var end, index, model, nextIndex, nextModel;
        if (that.isDragging) {
          end = that.get_end(that.dragIntervall);
          index = parseInt(that.dragIntervall.data('index'));
          model = that.collection.models[index];
          model.attributes.end = end;
          model.save();
          nextIndex = parseInt(that.next.data('index'));
          nextModel = that.collection.models[nextIndex];
          nextModel.attributes.start = end;
          nextModel.save();
          return that.isDragging = false;
        }
      });
      this.$el.mouseleave(function(e) {
        if (that.isDragging) {
          that.dragIntervall.width(that.startWidth);
        }
        return this.isDragging = false;
      });
      ref = this.collection.models;
      results = [];
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        entry = ref[index];
        results.push(this.renderIntervall(entry, index));
      }
      return results;
    };

    TimelineView.prototype.close = function() {
      $(window).off('resize', this.updateIntervallWidths);
      return TimelineView.__super__.close.call(this);
    };

    return TimelineView;

  })(DisposableView);

  API.View.ScheduleView = ScheduleView = (function(superClass) {
    extend(ScheduleView, superClass);

    function ScheduleView() {
      this.close = bind(this.close, this);
      this.changeName = bind(this.changeName, this);
      this.enableSchedule = bind(this.enableSchedule, this);
      this.deleteSchedule = bind(this.deleteSchedule, this);
      this.reload = bind(this.reload, this);
      this.initialize = bind(this.initialize, this);
      return ScheduleView.__super__.constructor.apply(this, arguments);
    }

    ScheduleView.prototype.events = {
      'change input.form-control[placeholder="name"]': 'changeName',
      'click #enableSchedule': 'enableSchedule',
      'click #deleteSchedule': 'deleteSchedule'
    };

    ScheduleView.prototype.initialize = function(attrs, options) {
      var $button, event, i, len, ref, that;
      that = this;
      this.template = $("<div class='panel panel-success'> <div class='panel-heading clearfix'> <div class='panel-title pull-left'> Schedule </div> <div class='pull-right'> <button id='enableSchedule' type='button' class='btn btn-danger' title='Enable' style='display: inline-block'>Disabled</button> <button id='deleteSchedule' type='button' class='btn btn-danger' style='display: inline-block'>Remove</button> </div> </div> <div class='input-group'> <span class='input-group-addon'> Name </span> <input class='form-control' type='text' placeholder='name' value='" + this.model.attributes.name + "'/> </div> <div id='timeline'> <i id='timeline-tooltip' data-toggle='tooltip' data-placement='top' data-animation='false' data-trigger='manual'/> </div> </div>");
      this.$el.html(this.template);
      if (this.model.attributes.active) {
        $button = this.template.find('#enableSchedule');
        $button.removeClass('btn-danger');
        $button.prop('disabled', true);
        $button.addClass('btn-success');
        $button.text('Enabled');
        $button.attr('title', 'Enabled');
      }
      ref = 'add remove'.split(' ');
      for (i = 0, len = ref.length; i < len; i++) {
        event = ref[i];
        this.model.attributes.entries.bind(event, this.reload);
      }
      return this.timeline = new TimelineView({
        el: this.template.find('#timeline'),
        collection: that.model.attributes.entries
      });
    };

    ScheduleView.prototype.reload = function(e) {
      return API.controller.showSchedule(this.model);
    };

    ScheduleView.prototype.deleteSchedule = function(e) {
      var entry, event, i, len, ref;
      ref = 'add remove'.split(' ');
      for (i = 0, len = ref.length; i < len; i++) {
        event = ref[i];
        this.model.attributes.entries.unbind(event, this.reload);
      }
      while (entry = this.model.attributes.entries.first()) {
        entry.destroy();
      }
      this.model.destroy();
      return API.controller.unshowSchedule();
    };

    ScheduleView.prototype.enableSchedule = function(e) {
      var $button, i, len, ref, results, schedule;
      $button = $(e.currentTarget);
      $button.removeClass('btn-danger');
      $button.prop('disabled', true);
      $button.addClass('btn-success');
      $button.text('Enabled');
      this.model.attributes.active = true;
      this.model.save();
      ref = this.model.collection.models;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        schedule = ref[i];
        if (schedule.attributes.active && schedule.attributes.id !== this.model.attributes.id) {
          schedule.attributes.active = false;
          results.push(schedule.save());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ScheduleView.prototype.changeName = function(e) {
      this.model.attributes.name = $(e.target).val();
      return this.model.save();
    };

    ScheduleView.prototype.close = function() {
      this.timeline.close();
      return ScheduleView.__super__.close.call(this);
    };

    return ScheduleView;

  })(DisposableView);

  API.View.SchedulesView = SchedulesView = (function(superClass) {
    extend(SchedulesView, superClass);

    function SchedulesView() {
      this.render = bind(this.render, this);
      this.clickScheduleLink = bind(this.clickScheduleLink, this);
      this.initialize = bind(this.initialize, this);
      return SchedulesView.__super__.constructor.apply(this, arguments);
    }

    SchedulesView.prototype.events = {
      'click .list-group-item': 'clickScheduleLink'
    };

    SchedulesView.prototype.initialize = function(attrs, options) {
      var event, i, len, ref, results;
      ref = 'sync add remove reset'.split(' ');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        event = ref[i];
        results.push(this.collection.bind(event, this.render));
      }
      return results;
    };

    SchedulesView.prototype.clickScheduleLink = function(e) {
      var entries, index, schedule;
      index = $(e.currentTarget).data('schedule');
      entries = new API.Entries();
      schedule = this.collection.models[index];
      entries.schedule_id = schedule.attributes.id;
      return entries.fetch({
        success: function(collection, response, options) {
          schedule.set({
            entries: collection
          });
          return API.controller.showSchedule(schedule);
        }
      });
    };

    SchedulesView.prototype.render = function() {
      this.$el.empty();
      return this.collection.each((function(_this) {
        return function(model, index) {
          var $schedule;
          $schedule = $(("<a class='list-group-item' data-schedule='" + index + "' href='#'> <div class='schedule-row-title'> " + model.attributes.name + "&nbsp; </div> <div>") + (model.attributes.active ? "<span class='label label-success'>Enabled</span>" : "<span class='label label-danger'>Disabled</span>") + "</div> </a>");
          return _this.$el.append($schedule);
        };
      })(this));
    };

    return SchedulesView;

  })(DisposableView);

  API.App = App = (function(superClass) {
    extend(App, superClass);

    function App() {
      this.add = bind(this.add, this);
      this.initialize = bind(this.initialize, this);
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.events = {
      'click #schedule-add': 'add'
    };

    App.prototype.initialize = function(attrs, options) {
      ($(window)).ajaxError((function(_this) {
        return function(e, r) {
          var err, j;
          ($('#request-error')).html((get_template('request-error'))());
          if ((j = $.parseJSON(r.responseText)) && (err = j.error)) {
            return ($('#request-error .msg')).text('Server Error: ' + err);
          }
        };
      })(this));
      ($(window)).ajaxSuccess((function(_this) {
        return function(data) {
          return ($('#request-error')).html('');
        };
      })(this));
      (API.schedules = new Schedules()).fetch();
      API.controller = new API.Controller;
      return API.controller.showSchedules();
    };

    App.prototype.add = function(e) {
      return API.schedules.create({
        name: new Date,
        entries: new Entries([])
      }, {
        success: function(model, response) {
          model.attributes.entries.schedule_id = model.attributes.id;
          return model.attributes.entries.create({
            start: 0,
            end: 24 * 3600,
            directory: '/'
          });
        }
      });
    };

    return App;

  })(DisposableView);

  API.Controller = Controller = (function() {
    function Controller() {
      this.showEntry = bind(this.showEntry, this);
      this.unshowEntry = bind(this.unshowEntry, this);
      this.showSchedule = bind(this.showSchedule, this);
      this.unshowSchedule = bind(this.unshowSchedule, this);
      this.showSchedules = bind(this.showSchedules, this);
    }

    Controller.prototype.showSchedules = function() {
      if (this.schedulesView) {
        this.schedulesView.close();
      }
      this.schedulesView = new SchedulesView({
        collection: API.schedules,
        el: $('#schedules')
      });
      return this.schedulesView;
    };

    Controller.prototype.unshowSchedule = function() {
      if (this.scheduleView) {
        this.scheduleView.close();
      }
      if (this.entryView) {
        this.entryView.close();
      }
      this.entryView = null;
      return this.scheduleView = null;
    };

    Controller.prototype.showSchedule = function(schedule) {
      this.unshowEntry();
      if (this.scheduleView) {
        this.scheduleView.close();
      }
      this.scheduleView = new ScheduleView({
        model: schedule,
        el: $('#schedule')
      });
      return this.scheduleView;
    };

    Controller.prototype.unshowEntry = function() {
      if (this.entryView) {
        this.entryView.close();
      }
      return this.entryView = null;
    };

    Controller.prototype.showEntry = function(entry, options) {
      if (this.entryView) {
        this.entryView.close();
      }
      this.entryView = new EntryView({
        el: $('#entry'),
        model: entry
      }, options);
      return this.entryView;
    };

    return Controller;

  })();

}).call(this);
